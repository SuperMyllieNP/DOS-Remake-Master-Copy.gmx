<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSharkMan</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;

healthBarPrimaryColor[1] = 22;
healthBarSecondaryColor[1] = 52;


ytimer = 0
spriteStart = sprite_index
hasTriggeredFall = false;
bossTriggered = true;
image_speed = 0;
contactDamage = 6;
pose = sprSharkPose
poseImgSpeed = 0.25
guardCancel = false
grav = .24
customPose =true
introType = 0
hasTriggeredFall = false;
bossTriggered = true;
image_speed = 0;
contactDamage = 6;
ground = false;
timer = 0
phase= 0 
jumpX[0] = 16
jumpX[1] = 240
jumpX[2] = 208
jumpX[3] = 48
jumpY = 192
selectPoint = 1

// Music
music = "Mega_Man_5GB.gbs";
musicType = "VGM";
musicTrackNumber = 5;

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MaGMML3
enemyDamageValue(objSparkChaser, 1);
enemyDamageValue(objLaserTrident, 2);
enemyDamageValue(objWaterShield, 4);
enemyDamageValue(objTornadoBlow, 1);
enemyDamageValue(objThunderBeam, 1);
enemyDamageValue(objMagneticShockwave, 4);
enemyDamageValue(objIceWall, 1);
enemyDamageValue(objBreakDash, 1);

// MaGMML2
enemyDamageValue(objHornetChaser, 1);
enemyDamageValue(objJewelSatellite, 2);
enemyDamageValue(objGrabBuster, 2);
enemyDamageValue(objTripleBlade, 1);
enemyDamageValue(objWheelCutter, 3);
enemyDamageValue(objSlashClaw, 4);
enemyDamageValue(objSakugarne, 2);
enemyDamageValue(objSuperArrow, 2);
enemyDamageValue(objWireAdapter, 3);

// MaGMML1
enemyDamageValue(objMetalBlade, 1);
enemyDamageValue(objGeminiLaser, 1);
enemyDamageValue(objSolarBlaze, 4);
enemyDamageValue(objTopSpin, 1);
enemyDamageValue(objThunderWool, 2);
enemyDamageValue(objPharaohShot, 2);
enemyDamageValue(objBlackHoleBomb, 1);
enemyDamageValue(objMagicCard, 2);

// MaG48HMML
enemyDamageValue(objFlameMixer, 4);
enemyDamageValue(objRainFlush, 2);
enemyDamageValue(objSparkShock, 2);
enemyDamageValue(objSearchSnake, 1);
enemyDamageValue(objTenguBlade, 2);
enemyDamageValue(objTenguDash, 2);
enemyDamageValue(objTenguDisk, 2);
enemyDamageValue(objSaltWater, 2);
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objHomingSniper, 1);

// MaG24HMML
enemyDamageValue(objSuperArmBlockProjectile, 1);
enemyDamageValue(objSuperArmDebris, 1);
enemyDamageValue(objChillShot, 0);
enemyDamageValue(objChillSpikeLanded, 0);

// Misc.
enemyDamageValue(objPowerStone, 1);
enemyDamageValue(objPlantBarrier, 2);
enemyDamageValue(objBrickWeapon, 1);
enemyDamageValue(objIceSlasher, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// leave this. this is needed. 
event_inherited();
if (!global.frozen)
{
    if (startIntro)
    {
        y = view_yview[0] + view_hview[0];
        canFillHealthBar = false;
        image_index = 4;
        startIntro = false;
        isIntro = true;
        visible = true;
        blockCollision = false;
        calibrateDirection();
        grav = .24;
        yspeed = -10;
        hasTriggeredFall = false;
    }
    else if (isIntro)
    {
        if (y &gt;= ystart &amp;&amp; yspeed &gt;= 0 || hasTriggeredFall)
        {
            // Since bosses do not have gravity during intros, we need to reuse this here.
            hasTriggeredFall = true;
            y = ystart;
            timer++;
            yspeed = 0;
            sprite_index = pose;
            if (timer &gt; 60)
            {
                image_speed = 0;
                canFillHealthBar = true;
                isIntro = false;
                ground = true;
                timer = 0;
                blockCollision = true;
            }
        }
    }
}
if (entityCanStep())
{
    if (isFight)
    {
        image_speed = 0;
        sprite_index = spriteStart;
        if (phase != 1 &amp;&amp; phase != 2 &amp;&amp; phase != 3)
            calibrateDirection();
        
        switch (phase)
        {
            case 0:
                randomize();
                xspeed = 0;
                grav = .24;
                selectPoint = irandom(1);
                image_index = 0;
                timer++;
                if (timer &gt; 25)
                {
                    phase = 1;
                    timer = 0;
                }
                break;
            case 1:
                timer++;
                if (timer == 1)
                {
                    image_index = 4;
                    yspeed = -6;
                    xspeed = arcCalcXspeed(-6, .24, x, y, view_xview[0] + jumpX[selectPoint], view_yview[0] + jumpY);
                    if (x &lt; jumpX)
                        image_xscale = 1;
                    else
                        image_xscale = -1;
                }
                if ((view_yview[0] + jumpY + 16) &lt;= y &amp;&amp; timer &gt; 1)
                {
                    timer = 0;
                    yspeed = 0;
                    xspeed = 0;
                    calibrateDirection();
                    y = view_yview[0] + jumpY + 16;
                    phase = 2;
                    image_index = 7;
                }
                break;
            case 2:
                timer++;
                yspeed = 0;
                grav = 0;
                y = view_yview[0] + jumpY + 16;
                ytimer++
                if ytimer == 11 || ytimer == 31 image_index = 8
                if ytimer == 1 image_index = 7
                if ytimer == 21 image_index = 9
                if ytimer == 41 {
                image_index = 7
                ytimer = 0
                }
                
               
                if image_index == 10 || image_index &lt; 7 image_index = 7
                if (image_xscale == -1 &amp;&amp; x &lt;= view_xview[0] + 32)
                {
                    x = view_xview[0] + 32;
                    grav = .24;
                    yspeed = -8;
                    if (instance_exists(objMegaman))
                        if (distance_to_object(objMegaman) &lt; 90)
                            phase = choose(3, 4);
                        else
                            phase = 4;
                    image_index = 4;
                    image_xscale = 1;
                    xspeed = 1;
                    ytimer = 0
                    timer = 0;
                }
                else if (image_xscale == 1 &amp;&amp; x &gt;= view_xview[0] + 224)
                {
                    x = view_xview[0] + 224;
                    grav = .24;
                    if (instance_exists(objMegaman))
                        if (distance_to_object(objMegaman) &lt; 90)
                            phase = choose(3, 4);
                        else
                            phase = 4;
                    xspeed = -1;
                    image_xscale = -1;
                    yspeed = -8;
                    image_index = 4;
                    ytimer = 0
                    timer = 0;
                }
                else
                    xspeed = 2 * image_xscale;
                break;
            case 3:
                if (ground || timer &gt;= 30)
                    timer++;
                if (ground)
                {
                    if (timer == 1)
                    {
                        image_index = 2;
                        calibrateDirection();
                        xspeed = 0;
                    }
                    if (timer == 10)
                    {
                        image_index = 3;
                    }
                }
                else if (timer &lt; 30)
                {
                    if (yspeed &gt;= 0)
                        xspeed = image_xscale;
                }
                if (timer == 30)
                {
                    image_index = 4;
                    
                    yspeed = -6;
                    if (instance_exists(objMegaman))
                        xspeed = arcCalcXspeed(-6, .24, x, y, objMegaman.x, objMegaman.y);
                    else
                        xspeed = image_xscale;
                }
                if (timer &gt; 30)
                {
                    if (inWater)
                    {
                        grav = .24;
                        
                        
                        calibrateDirection();
                        xspeed = image_xscale;
                        yspeed = -7;
                        
                        image_index = 4;
                        timer = 0;
                    }
                    if (yspeed &gt; 0)
                    {
                        ytimer++;
                        
                        if (ytimer == 1) {
                            image_index = 5;
                            grav = 0
                        }
                        if (ytimer == 10) {
                            image_index = 6;
                            yspeed = 7    
                        }
                    }
                    if (ground)
                    {
                        xspeed = 0;
                        image_index = 0;
                        ytimer = 0;
                        timer = 0;
                        phase = 0;
                        grav = .24
                    }
                }
                break;
            case 4:
                if (ground || timer &gt; 0)
                    timer++;
                else
                    xspeed = image_xscale;
                if (timer == 1)
                {
                    image_index = 10;
                    xspeed = 0;
                }
                if (timer == 20)
                {
                    image_index = 11;
                    with (instance_create(x, y, objSharkManBoomerang))
                    {
                        xspeed = 5 * other.image_xscale;
                        yspeed = 0;
                        playSFX(sfxSharkBoomerang)
                    }
                }
                if (timer == 40)
                {
                    image_index = 12;
                    yspeed = -5;
                    xspeed = 1 * image_xscale;
                }
                if (yspeed &gt;= 0 &amp;&amp; image_index == 12 &amp;&amp; timer &gt; 41)
                {
                    image_index = 13;
                    with (instance_create(x, y, objSharkManBoomerang))
                    {
                        xspeed = .6*5 * other.image_xscale;
                        yspeed = .6*3;
                        playSFX(sfxSharkBoomerang)
                    }
                }
                if (ground &amp;&amp; timer &gt; 41)
                {
                    timer = 0;
                    phase = 0;
                    yspeed = 0;
                    xspeed = 0;
                    image_index = 0;
                }
                if (inWater &amp;&amp; timer &gt; 41)
                {
                    grav = .24;
                    
                    
                    calibrateDirection();
                    xspeed = image_xscale;
                    yspeed = -7;
                    timer = 0;
                    image_index = 4;
                    phase = 2;
                }
                break;
        }
    }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>other.guardCancel = guardCancel

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
