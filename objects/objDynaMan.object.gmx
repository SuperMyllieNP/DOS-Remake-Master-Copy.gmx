<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprDynaMan</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;

healthBarPrimaryColor[1] = 22;
healthBarSecondaryColor[1] = 52;

hasTriggeredFall = false;
bossTriggered = true;
image_speed = 0;
contactDamage = 6;
sprite_index = sprDynaManIntro
mineCount = 0
grav = .24
customPose =true
hasTriggeredFall = false;
bossTriggered = true;
image_speed = 0;
contactDamage = 6;
ground = false;
hasFired = false
jumpMax = 3;
jumps = 0;
throwBomb = false
throwBombTimer = 0
phase =1
timer = 0
queArmCannon = false
jumpIndex = 1
jumpThrowIndexes[0] = 2
jumpThrowIndexes[1] = 3
jumpThrowIndexes[2] = 4
startXScale = -1
attackTimer = 0
// Music
music = "Mega_Man_5GB.gbs";
musicType = "VGM";
musicTrackNumber = 5;

// Damage Table
enemyDamageValue(objBusterShot, 2);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);
enemyDamageValue(objSonicWaveWeapon, 1)
enemyDamageValue(objForceField, 6)
enemyDamageValue(objNuclearDetonatorExplosion, 0)
enemyDamageValue(objBitCannon, 3)
enemyDamageValue(objSharkBoomerangDR, 0)
enemyDamageValue(objWaterShooter, 1)
enemyDamageValue(objOilStream, 0)
enemyDamageValue(objBladeLauncher, 2)
enemyDamageValue(objTorchArmProj, 1)
enemyDamageValue(objTorchArmHold, 2)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// leave this. this is needed.
event_inherited();

// all of dyna man's events trigger when the game isn't frozen.
if (!global.frozen)
{
    if (startIntro)
    {
        y -= view_hview;
        canFillHealthBar = false;
        image_index = 2;
        startIntro = false;
        isIntro = true;
        visible = true;
        calibrateDirection();
    }
    
    
}
if (entityCanStep())
{
    if (isFight)
    {
        image_speed = 0;
        sprite_index = sprDynaMan;
        calibrateDirection();
        if (ground)
        {
            image_index = 0;
            if (attackTimer &gt; 0)
            {
                xspeed = 0;
                attackTimer--;
            }
            else
            {
                if (fallTime)
                {
                    fallTime = false;
                    bombToThrow = true;
                    if (smallJumps &gt; jumpCounter)
                    {
                        attackTimer = 10;
                        jumpCounter++;
                    }
                    else
                    {
                        attackTimer = 45;
                        smallJumps = 3 + irandom(4);
                        jumpCounter = 0;
                    }
                }
                else
                {
                    fallTime = true;
                    var x_start, x_end, x_displacement;
                    x_start = x;
                    if (instance_exists(target))
                    {
                        x_end = target.x;
                    }
                    else
                    {
                        x_end = x;
                    }
                    x_displacement = x_end - x_start;
                    if (abs(x_displacement) &gt; 64)
                    {
                        x_displacement = sign(x_displacement) * 64;
                    }
                    if (smallJumps &gt; jumpCounter)
                    {
                        image_index = (jumpCounter mod 2) + 1;
                        yspeed = -sqrt(abs(2 * gravAccel * smallJumpHeight));
                        airTime = abs(2 * yspeed / gravAccel);
                        xspeed = x_displacement / airTime;
                    }
                    else
                    {
                        image_index = 3;
                        yspeed = -sqrt(abs(2 * gravAccel * bigJumpHeight));
                        airTime = abs(2 * yspeed / gravAccel);
                        xspeed = x_displacement * 2 / airTime;
                    }
                }
            }
        }
        else
        {
            if (smallJumps &lt;= jumpCounter &amp;&amp; yspeed &gt;= 0 &amp;&amp; bombToThrow)
            {
                bombToThrow = false;
                image_index = 4;
                attackTimer = 6;
                if (instance_exists(target))
                {
                    with (instance_create(x + bombX * image_xscale,
                        y + bombY * image_yscale, objDynaDynamite))
                    {
                        image_xscale = other.image_xscale;
                        aimAtTarget(6);
                    }
                }
                else
                {
                    with (instance_create(x + bombX * image_xscale,
                        y + bombY * image_yscale, objDynaDynamite))
                    {
                        image_xscale = other.image_xscale;
                        xspeed = 0;
                        yspeed = 6;
                    }
                }
                playSFX(sfxEnemyDrop);
            }
            else if (smallJumps &lt;= jumpCounter &amp;&amp; yspeed &gt;= 0)
            {
                if (attackTimer &gt; 0)
                {
                    attackTimer--;
                }
                else
                {
                    image_index = 5;
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

smallJumps = 3 + irandom(4);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if other.object_index == objNuclearDetonatorExplosion other.guardCancel = 1
if other.object_index == objSharkBoomerangDR other.guardCancel = 1
if other.object_index == objOilStream other.guardCancel = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (objDynaDynamite)
{
    instance_create(x, y, objExplosion);
    instance_destroy();
}
with (objHarmfulExplosion)
{
    instance_destroy();
}
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
