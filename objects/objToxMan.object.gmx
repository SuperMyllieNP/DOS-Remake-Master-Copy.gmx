<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprToxForkliftCertified</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;

healthBarPrimaryColor[1] = 22;
healthBarSecondaryColor[1] = 52;
supPhase =0
if supPhase = 1 {
sprite_index = sprToxMan
pose= sprToxMan
}
else {
sprite_index = sprToxForkliftCertified
pose = sprite_index
}
introType = 2
canForkHit = true
hasTriggeredFall = false;
bossTriggered = true;
image_speed = 0;
contactDamage = 8;
pose = sprite_index
forkliftHP = 14
poseImgSpeed = 0.25
liftY = 0
guardCancel = true
grav = .25
customPose =false
stunLock = false
image_speed = 0;
contactDamage = 12;
ground = false;
timer = 0
guardCancel = 3
phase= 0 
// Music
music = "Mega_Man_5GB.gbs";
musicType = "VGM";
musicTrackNumber = 5;

// Damage Table
enemyDamageValue(objBusterShot, 2);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);
enemyDamageValue(objSonicWaveWeapon, 2)
enemyDamageValue(objForceField, 4)
enemyDamageValue(objNuclearDetonatorExplosion, 6)
enemyDamageValue(objBitCannon, 0)
enemyDamageValue(objSharkBoomerangDR, 2)
enemyDamageValue(objWaterShooter, 2)
enemyDamageValue(objOilStream, 8)
enemyDamageValue(objBladeLauncher, 1)
enemyDamageValue(objTorchArmProj, 2)
enemyDamageValue(objTorchArmHold, 4)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
canForkHit = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (!global.frozen)
{
    if (supPhase == 0)
        contactDamage = 12;
    else
        contactDamage = 6;
    
    image_speed = 0.15;
    
    if (supPhase == 0)
    {
        if (!instance_exists(objToxLift))
        {
            toxID = instance_create(bbox_right, bbox_bottom - 22 + (-4 * image_index), objToxLift);
        }
        else
        {
            toxID.y = bbox_bottom - 20 + liftY;
            objToxLift.image_xscale = image_xscale;
            if (image_xscale == 1)
                objToxLift.x = bbox_right - 14;
            else
                objToxLift.x = bbox_left + 14;
        }
    }
    if (isFight)
    {
        if (supPhase == 0)
        {
            image_xscale = -1;
            guardCancel = 3;
            switch (phase)
            {
                case 0:
                    sprite_index = sprToxForkliftCertified;
                    if (place_meeting(x - 5, y, prtPlayerProjectile))
                    {
                        phase = 5;
                        timer = 0;
                        xspeed = 3;
                    }
                    xspeed = -2;
                    objToxLift.x -= 3;
                    if (instance_exists(objMegaman))
                        if (objToxLift.bbox_left &lt;= objMegaman.bbox_left)
                        {
                            xspeed = 0;
                            phase = 1;
                        }
                    break;
                case 1:
                    if (liftY &gt; -40)
                    {
                        liftY -= 5;
                        objToxLift.checksp = sign(liftY) * 5;
                    }
                    else
                    {
                        phase = 2;
                    }
                    break;
                case 2:
                    timer++;
                    if (timer &gt; 60)
                    {
                        phase = 3;
                        timer = 0;
                    }
                    break;
                case 3:
                    sprite_index = sprToxLiftDown;
                    if (liftY != 0)
                        liftY += 5;
                    else
                    {
                        if (global.shakeTimer == 0)
                        {
                            if (instance_exists(objMegaman))
                                with (objMegaman)
                                    if (!isShocked)
                                        playerGetShocked(false, 0, true, 40);
                                        playSFX(sfxGutsQuake);
                        screenShake(38, 1, 1);

                        }
                        phase = 4;
                        timer = 0;
                    }
                    break;
                case 4:
                    if (x &lt; xstart)
                        xspeed = 2;
                    else
                    {
                        phase = 0;
                        timer = 0;
                        xspeed = 0;
                        liftY = 0;
                    }
                    break;
                case 5:
                    timer++;
                    if (timer == 1)
                        xspeed = 3;
                    xspeed -= 0.25;
                    if (xspeed &lt;= 0)
                    {
                        timer = 0;
                        phase = 0;
                    }
                    break;
            }
        }
        else
        {
            image_speed = 0;
            sprite_index = sprToxMan;
            switch (phase)
            {
                case -1:
                    guardCancel = 3;
                    if (ground)
                        image_index = 0;
                    else
                        image_index = 2;
                    xspeed = 0;
                    timer = 0;
                    grav = 0.25;
                    calibrateDirection();
                    phase = 0;
                    break;
                case 0:
                    if (ground)
                        timer++;
                    if (timer == 25)
                        image_index = 1;
                    if (timer == 30)
                        image_index = 9;
                    if (timer == 40)
                        image_index = 8;
                    if (timer == 75)
                    {
                        phase = 1;
                        timer = 0;
                        calibrateDirection();
                    }
                    break;
                case 1:
                    timer++;
                    guardCancel = 0;
                    xspeed = 2 * image_xscale;
                    if (place_meeting(x + xspeed, y, objSolid))
                    {
                        yspeed = -4;
                        image_xscale *= -1;
                    }
                    if (!ground)
                    {
                        image_index = 2;
                        image_speed = 0;
                    }
                    else
                    {
                        if image_index &lt; 2.3 playSFX(sfxClamp)
                        image_index += .15;
                        if (image_index &gt;= 8)
                            image_index = 4;
                        if (image_index &lt; 4)
                            image_index = 4;
                        if (timer % 80 == 0)
                        {
                            timer = 0;
                            phase = 2;
                            saveXscale = image_xscale;
                            
                            image_index = 1;
                        }
                    }
                    break;
                case 2:
                    timer++;
                    xspeed = 0;
                    if (timer == 1)
                    {
                        calibrateDirection();
                        playSFX(sfxToxShoot)
                        with (instance_create(x, y, objToxBullet))
                            image_xscale = other.image_xscale;
                        image_index = 3;
                    }
                    if (timer == 15)
                    {
                        image_index = 1;
                    }
                    if (timer == 30)
                    {
                        image_index = 0;
                        timer = 0;
                        phase = 1;
                        image_xscale = saveXscale;
                    }
                    break;
            }
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>other.guardCancel = guardCancel
if supPhase == 0 {
if other.y &gt; bbox_top+13 &amp;&amp; other.y &lt; bbox_bottom - 33 {
if canForkHit {
forkliftHP -= 1
with other instance_destroy()
playSFX(sfxEnemyHit)
if forkliftHP &lt;= 0 {
with objToxLift instance_destroy()
supPhase = 1
instance_create(x,y,objBigExplosion)
guardCancel = 0
phase = -1
}
else {
canForkHit = false
alarm[9] = 2
}
}
}
}

if other.object_index == objBitCannon other.guardCancel = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if canForkHit || supPhase == 1 event_inherited()
else {
d3d_set_fog(true,c_white,0,0)
draw_self()
d3d_set_fog(false,c_black,0,0)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
