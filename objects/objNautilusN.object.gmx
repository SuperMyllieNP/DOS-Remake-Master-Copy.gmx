<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprNautilus</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///isnt this a gd level
event_inherited();

healthpointsStart = 4;
healthpoints = healthpointsStart;
contactDamage = 2;
grav = 0;
init = true
xspeed= 0
yspeed= 0
phase = 0
image_speed = 0
timer = 0;
freq = 0
angle =0
n = 0
failsafe = 0
idle = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (init)
{
    init = 0;
    phase = 0;
    timer = 0;
    n = 0;
    
    // set specific variables to make obj more unique
}

event_inherited();

if (entityCanStep())
{
    blockCollision = true;
    
    timer++;
    
    if (timer % 10 == 0)
        image_index++;
    
    if instance_exists(objMegaman) {
        if objMegaman.inWater == false &amp;&amp; !failsafe{
           failsafe = true
           
        }
    }
    if (inWater == false) 
    {
        failsafe = true
        y += 5
    }
    if inWater &amp;&amp; !failsafe
    {
        grav = 0;
        calibrateDirection();
        if (instance_exists(objMegaman))
        {
            if (!objMegaman.teleporting &amp;&amp; !objMegaman.showReady)
            {
                xspeed = cos(degtorad(point_direction(x, y, objMegaman.x, objMegaman.y)));
                yspeed = -sin(degtorad(point_direction(x, y, objMegaman.x, objMegaman.y)));
            }
            else
            {
                xspeed = 0;
                yspeed = 0;
            }
        }
    }
    else {
        grav = 0;
        if (instance_exists(objMegaman))
        {
            if (objMegaman.inWater == false)
            {
                
                if idle == false {
                if x &gt; xstart image_xscale = -1 else image_xscale= 1
                xspeed = cos(degtorad(point_direction(x, y, xstart, ystart)));
                yspeed = -sin(degtorad(point_direction(x, y, xstart, ystart)));
                    if rectangle_in_rectangle(x,y,x,y,xstart-5,ystart-5,xstart+5,ystart+5) {
                        idle = true
                        
                    }
                }else {
                    yspeed = 0
                    xspeed = .75 * image_xscale
                    if timer % 30 == 0 image_xscale *= -1
                    if objMegaman.inWater == true {
                    failsafe = false
                    idle = false
                    }
                }
            }
            else
            {
                xspeed = 0;
                yspeed = 0;
                failsafe = false
                idle = false
            }
        }
    }
    
    // code here
}
else if (dead)
{
    // reset custom variables here!
    image_index = 0;
    phase = 0;
    n = 0;
    timer = 0;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
