<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>prtAlwaysActive</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

parent = 0;
faction = 2;
canDamage = false;

canFloat = true;

floatTimer = 0;
floatIndex = 0;

imgIndex = 0;
sineTimer = 0;

falling = 0;

pid = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(parent)
{
    if floatTimer &gt; 0
    {
        sineTimer += (2 * pi) / 8
        imgIndex = sin(sineTimer) + 1
        
        parent.yspeed = 0.25;
    }
    else
    {
        sineTimer = 0
        if parent.ground == true
        {
            if parent.isSlide == false
            {
                imgIndex = 0
            }
            else
            {
                imgIndex = 1
            }
        }
        else
        {
            if round(parent.yspeed) == 0
            {
                imgIndex = 1
            }
            {
                if parent.yspeed &gt; 0
                {
                    imgIndex = 2
                }
                else
                {
                    imgIndex = 0
                }    
            }
        }       
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(parent)
{ 
    if parent.isSlide == true
    {
        x = parent.x - 17 * parent.image_xscale;
        y = parent.y + 4 * parent.image_yscale;
        depth = 1;
    }
    else if parent.climbing == true
    {
        x = parent.x - 14 * parent.image_xscale;
        y = parent.y - 0 * parent.image_yscale;
        depth = -1;
    }
    else
    {
        x = parent.x - 17 * parent.image_xscale;
        y = parent.y - 1 * parent.image_yscale;
        depth = 1;
    }
    
    image_xscale = parent.image_xscale;
    image_yscale = parent.image_yscale;
    
    if (parent.ground == false &amp;&amp; parent.climbing == false)
    {
        falling ++
    }
    else
    {
        falling = 0
    }
    
    if (falling &gt;= 15 &amp;&amp; parent.isSlide == false &amp;&amp; parent.isHit == false &amp;&amp; parent.isShocked == false &amp;&amp; parent.climbing == false &amp;&amp; parent.teleporting == false &amp;&amp; parent.isFrozen == 0 &amp;&amp; parent.vehicle == noone) //Big boy if statement
    {
        canFloat = true;
    }
    else
    {
        canFloat = false;
    }
    
    if (global.keyJumpPressed[parent.playerID] &amp;&amp; canFloat == true)
    {
        floatTimer = 10;
        playSFX(sfxBausTail)
    }
    
    floatTimer --;
    floatTimer = max(floatTimer, 0);
}
else
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
    var playerID;
    playerID = pid;
*/
if instance_exists(parent)
{

col[0] = c_white;
col[1] = global.primaryCol[parent.playerID];
col[2] = global.secondaryCol[parent.playerID];
col[3] = global.outlineCol[parent.playerID];

//drawCostume(sprVictoryAnimations, min(imgIndex, vicFrames - 1), cid, round(x), round(y), image_xscale, image_yscale, c_white, global.primaryCol[pid], global.secondaryCol[pid], global.outlineCol[pid]);

    if (parent.teleporting == false)
    {
        for (var i = 0; i &lt; 4; i ++)
        {
            draw_sprite_part_ext(sprBausTail, i, 1 + floor(imgIndex) * (18 + 3), 1, 18, 18, round(x), round(y), image_xscale, image_yscale, col[i], 1);
        };
        
        //draw_text(parent.x, parent.y - 16, string(sin(sineTimer) + 1));
    }

}
//1 + (floor(imgIndex)) * (48 + 3)

/*
/// drawCostume(costume, sheetX, sheetY, x, y, xscale, yscale, colBase, colPrimary, colSecondary, colOutline, [alphaBase = 1, alphaPrimary = 1, alphaSecondary = 1, alphaOutline = 1])
// draws the given costume (player skin) at the given coordinates with the given palette.
// costume: sprite index of costume (e.g. objMegaman)
// sheetX, sheetY: coord (in 48x48 units) of the animation frame in the skin sheet.
// colBase: blend mode to use for the base colour (leave as c_white)
// colPrimary, colSecondary, colOutline: palette colours
// [alphaBase, alphaPrimary, alphaSecondary, alphaOutline] (optional): alpha values for palette (0-1)

var costume = argument[0],
    sheetX = argument[1],
    sheetY = argument[2],
    _x = argument[3],
    _y = argument[4],
    _xscale = argument[5],
    _yscale = argument[6],
    col,
    alpha;

// palette
for (var i = 0; i &lt; 4; i++)
{
    col[i] = argument[7 + i];
    if (argument_count &gt; 11 + i)
        alpha[i] = argument[11 + i];
    else
        alpha[i] = 1;
}

var SquareSize = 48;

for (var i = 0; i &lt; 4; i += 1)
{
    draw_sprite_part_ext(costume, i,
        1 + (floor(sheetX) * (SquareSize + 3)),
        1 + (floor(sheetY) * (SquareSize + 3)), SquareSize,
        SquareSize, round(_x) - (24 * _xscale),
        round(_y) - (20 * _yscale), _xscale, _yscale,
        col[i], alpha[i]);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
