<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPetrolMan</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>sprPetrolChad</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;

healthBarPrimaryColor[1] = 22;
healthBarSecondaryColor[1] = 52;

spriteStart = sprite_index
hasTriggeredFall = false;
bossTriggered = true;
image_speed = 0;
contactDamage = 6;
pose = sprPetrolPose
poseImgSpeed = 0.25
guardCancel = false
grav = .24
customPose =false
hasTriggeredFall = false;
bossTriggered = true;
image_speed = 0;
contactDamage = 6;
ground = false;
timer = 0
phase= 0 
platChoice = 0
currentPlatform = 2
shotCounts= 0
queuePlatform = 0
platformX[0] = 0
platformX[1] = 0
walkIndex = 0
destX = 32
shotTimer = 7
introType =1
// Music
music = "Mega_Man_5GB.gbs";
musicType = "VGM";
musicTrackNumber = 5;

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MaGMML3
enemyDamageValue(objSparkChaser, 1);
enemyDamageValue(objLaserTrident, 2);
enemyDamageValue(objWaterShield, 4);
enemyDamageValue(objTornadoBlow, 1);
enemyDamageValue(objThunderBeam, 1);
enemyDamageValue(objMagneticShockwave, 4);
enemyDamageValue(objIceWall, 1);
enemyDamageValue(objBreakDash, 1);

// MaGMML2
enemyDamageValue(objHornetChaser, 1);
enemyDamageValue(objJewelSatellite, 2);
enemyDamageValue(objGrabBuster, 2);
enemyDamageValue(objTripleBlade, 1);
enemyDamageValue(objWheelCutter, 3);
enemyDamageValue(objSlashClaw, 4);
enemyDamageValue(objSakugarne, 2);
enemyDamageValue(objSuperArrow, 2);
enemyDamageValue(objWireAdapter, 3);

// MaGMML1
enemyDamageValue(objMetalBlade, 1);
enemyDamageValue(objGeminiLaser, 1);
enemyDamageValue(objSolarBlaze, 4);
enemyDamageValue(objTopSpin, 1);
enemyDamageValue(objThunderWool, 2);
enemyDamageValue(objPharaohShot, 2);
enemyDamageValue(objBlackHoleBomb, 1);
enemyDamageValue(objMagicCard, 2);

// MaG48HMML
enemyDamageValue(objFlameMixer, 4);
enemyDamageValue(objRainFlush, 2);
enemyDamageValue(objSparkShock, 2);
enemyDamageValue(objSearchSnake, 1);
enemyDamageValue(objTenguBlade, 2);
enemyDamageValue(objTenguDash, 2);
enemyDamageValue(objTenguDisk, 2);
enemyDamageValue(objSaltWater, 2);
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objHomingSniper, 1);

// MaG24HMML
enemyDamageValue(objSuperArmBlockProjectile, 1);
enemyDamageValue(objSuperArmDebris, 1);
enemyDamageValue(objChillShot, 0);
enemyDamageValue(objChillSpikeLanded, 0);

// Misc.
enemyDamageValue(objPowerStone, 1);
enemyDamageValue(objPlantBarrier, 2);
enemyDamageValue(objBrickWeapon, 1);
enemyDamageValue(objIceSlasher, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (!global.frozen)
{
    guardCancel = false;
    if (startIntro)
    {
        y= ystart
        canFillHealthBar = false;
        image_index = 2;
        startIntro = false;
        isIntro = true;
        visible = true;
        calibrateDirection();
    }
}
if (entityCanStep())
{
    if (isFight)
    {
        var box;
        if (image_xscale == -1)
            box = bbox_left;
        else
            box = bbox_right;

        image_speed = 0;
        sprite_index = spriteStart;
        if (phase != 3 &amp;&amp; phase != 7)
            calibrateDirection();
        
        switch (phase)
        {
            case 0:
                randomize();
                timer++;
                if (shotTimer &lt;= 6)
                    shotTimer = 7;
                x = floor(x);
                
                platformX[0] = 32;
                if currentPlatform == 1 platformX[1] = 224
                    else platformX[1] = 128
                if (currentPlatform == 0)
                    platformX[1] = 128;
                
                if (timer % 20 == 0)
                {
                    if (shotCounts &lt; 2)
                    {
                        shotTimer++;
                        if shotTimer &gt;= 7 &amp;&amp; shotTimer &lt;= 9 image_index = 7
                        else image_index = shotTimer
                        
                        
                        if (shotTimer &gt; 11)
                        {
                            shotTimer = 7;
                            if (shotCounts &lt; 2)
                            {
                                playSFX(sfxOil);
                                var e = instance_create(x, bbox_top + 2, objPetrolGlob);
                                e.xspeed = arcCalcXspeed(-6, .25, e.xstart, e.ystart, platformX[shotCounts], y);
                                e.yspeed = -6;
                                shotCounts++;
                            }
                        }
                    }
                    else
                    {
                        shotTimer = 7;
                        timer = 0;
                        image_index = 0;
                        phase = 1;
                    }
                }
                break;
            case 1:
                timer++;
                
                
                if (timer == 10)
                {
                    image_index = 3;
                    var oil = instance_create(box, bbox_top + sprite_height / 2, objPetrolManStream);
                    oil.image_xscale = image_xscale;
                    oil.xspeed = 3 * image_xscale;
                }
                if (timer == 30)
                {
                    image_index = 0;
                    platformX[0] = 32;
                    
                    if currentPlatform == 1 platformX[1] = 224
                    else platformX[1] = 128
                }
                if (timer == 60)
                {
                    timer = 0;
                    if currentPlatform == 2 queuePlatform = choose(0,1)
                    else if currentPlatform == 1 queuePlatform = choose(2,0)
                    else queuePlatform = choose(2,1)
                    
                    phase = 2;
                }
                shotCounts = 0;
                break;
            case 2:
                if (queuePlatform == 0)
                {
                    destX = 32;
                    image_xscale = -1;
                }
                else if (queuePlatform == 1)
                {
                    destX = 128;
                    if currentPlatform == 0
                    image_xscale = 1
                    else image_xscale = -1
                }
                else if (queuePlatform == 2)
                {
                    destX = 224;
                    image_xscale = 1;
                }
                timer = 0;
                phase = 3;
                xspeed = 2 * image_xscale;
                image_index = 1;
                break;
            case 3:
            case 7:
                timer++;
                if (ground)
                {
                    if (timer % 15 == 0)
                    {
                        walkIndex = !walkIndex;
                        
                    }
                    image_index = 1 + walkIndex;
                }
                else
                {
                    image_index = 4;
                }
                
                
                if (!place_meeting(box + image_xscale * 5, bbox_bottom + 2, objPetrolSolid) &amp;&amp;
                    !place_meeting(box + image_xscale * 5, bbox_bottom + 2, objPetrolIce) &amp;&amp; ground)
                {
                    yspeed = -3;
                    image_index = 4;
                }
                if (view_xview[0] + destX == x)
                {
                    calibrateDirection();
                    if phase = 3
                    phase = 4
                    else phase = 0
                    x = view_xview[0] + destX;
                    timer = 0;
                    xspeed = 0;
                    currentPlatform = queuePlatform;
                    image_index = 0;
                    if (phase == 0)
                    {
                        with (objPetrolOil)
                            instance_destroy();
                    }
                }
                break;
            case 4:
                timer++;
                if (timer == 1)
                    image_index = 5;
                if (timer == 15)
                    image_index = 6;
                if (timer == 30)
                {
                    if (instance_exists(objMegaman) &amp;&amp;
                        place_meeting(objMegaman.x, bbox_bottom, objPetrolOil))
                    {
                        instance_create(objMegaman.x, bbox_bottom, objPetrolWave);
                    }
                }
                if (timer &gt; 30)
                {
                    if (timer % 15 == 0 &amp;&amp; image_index % 30 != 0)
                        image_index = 8;
                    else if (image_index % 30 == 0)
                        image_index = 9;
                }
                if (timer &gt; 30 &amp;&amp; !instance_exists(objPetrolWave))
                {
                    timer = 0;
                    phase = 5;
                    image_index = 0;
                }
                break;
            case 5:
                timer++;
                
                if (timer == 10)
                {
                    image_index = 3;
                    var oil = instance_create(box, bbox_top + sprite_height / 2, objPetrolManStream);
                    oil.image_xscale = image_xscale;
                    oil.xspeed = 3 * image_xscale;
                }
                if (timer == 30)
                {
                    image_index = 0;
                    platformX[0] = 32;
                    if currentPlatform == 1 platformX[1] = 224
                    else platformX[1] = 128
                }
                if (timer == 60)
                {
                    if currentPlatform == 2 queuePlatform = choose(0,1)
                    else if currentPlatform == 1 queuePlatform = choose(2,0)
                    else queuePlatform = choose(2,1)
                    
                    phase = 6;
                }
                break;
            case 6:
                if (queuePlatform == 0)
                {
                    destX = 32;
                    image_xscale = -1;
                }
                else if (queuePlatform == 1)
                {
                    destX = 128;
                    if currentPlatform == 0
                    image_xscale = 1
                    else image_xscale = -1
                    
                }
                else if (queuePlatform == 2)
                {
                    destX = 224;
                    image_xscale = 1;
                }
                phase = 7;
                xspeed = 2 * image_xscale;
                image_index = 1;
                break;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>other.guardCancel = guardCancel

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
