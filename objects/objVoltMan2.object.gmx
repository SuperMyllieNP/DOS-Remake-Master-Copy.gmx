<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprVolt2Idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>sprVolt2Mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;

reflectProjectiles = false;
reflectProjectilesRight = false;
reflectProjectilesLeft = false;

blockCollision = true;

ground = false;
guardCancel = 0
pose = sprVolt2Intro;
poseImgSpeed = 8/60;
attackTimer = 0;
phase = 0;
myGrav = 1;
introType = 1
jumpsMade = 0;
jumpsMax = 1;
redetectRoof = 0;
turns = 0
chargeSound = false;

attackTimerMax[0] = 80;
attackTimerMax[1] = 100;
attackTimerMax[2] = 80;
attackTimerMax[3] = 40;

// Health Bar
healthBarPrimaryColor[1] = 7;
healthBarSecondaryColor[1] = 34;

contactDamage = 4;

// Music
music = "Mega_Man_5GB.gbs";
musicType = "VGM";
musicTrackNumber = 5;

// Damage Table
enemyDamageValue(objBusterShot, 3);
enemyDamageValue(objBusterShotHalfCharged, 3);
enemyDamageValue(objBusterShotCharged, 5);

// MaGMML3
enemyDamageValue(objSparkChaser, 1);
enemyDamageValue(objLaserTrident, 3);
enemyDamageValue(objWaterShield, 2);
enemyDamageValue(objTornadoBlow, 1);
enemyDamageValue(objThunderBeam, 0);
enemyDamageValue(objMagneticShockwave, 6);
enemyDamageValue(objIceWall, 2);
enemyDamageValue(objBreakDash, 1);

// MaGMML2
enemyDamageValue(objHornetChaser, 0);
enemyDamageValue(objJewelSatellite, 0);
enemyDamageValue(objGrabBuster, 1);
enemyDamageValue(objTripleBlade, 1);
enemyDamageValue(objWheelCutter, 1);
enemyDamageValue(objSlashClaw, 6);
enemyDamageValue(objSakugarne, 3);
enemyDamageValue(objSuperArrow, 6);
enemyDamageValue(objWireAdapter, 1);

// MaGMML1
enemyDamageValue(objMetalBlade, 4);
enemyDamageValue(objGeminiLaser, 2);
enemyDamageValue(objSolarBlaze, 2);
enemyDamageValue(objTopSpin, 0);
enemyDamageValue(objThunderWool, 0);
enemyDamageValue(objPharaohShot, 1);
enemyDamageValue(objBlackHoleBomb, 1);
enemyDamageValue(objMagicCard, 2);

// MaG48HMML
enemyDamageValue(objFlameMixer, 2);
enemyDamageValue(objRainFlush, 7);
enemyDamageValue(objSparkShock, 0);
enemyDamageValue(objSearchSnake, 2);
enemyDamageValue(objTenguBlade, 1);
enemyDamageValue(objTenguDash, 2);
enemyDamageValue(objTenguDisk, 1);
enemyDamageValue(objSaltWater, 4);
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objHomingSniper, 1);

// MaG24HMML
enemyDamageValue(objSuperArmBlockProjectile, 4);
enemyDamageValue(objSuperArmDebris, 4);
enemyDamageValue(objChillShot, 2);
enemyDamageValue(objChillSpikeLanded, 2);

// Misc.
enemyDamageValue(objPowerStone, 1);
enemyDamageValue(objPlantBarrier, 3);
enemyDamageValue(objBrickWeapon, 1);
enemyDamageValue(objIceSlasher, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if !global.frozen 
if startIntro  {
        y = ystart
        canFillHealthBar = false;
        image_index = 2;
        startIntro = false;
        isIntro = true;
        visible = true;
        calibrateDirection();
    }
if entityCanStep()
{

    if isFight {
    
        image_speed = 0;
        grav = 0.25 * myGrav;
        attackTimer += 1;

        if (instance_exists(objVoltBarrier))
        {
            guardCancel = 3
            objVoltBarrier.x = x;
            objVoltBarrier.y = y - 4;
        }
        else guardCancel = 0
        
        switch phase {
          case 0: // get into the shocker
            // create the roof detector.
            if (!instance_exists(objVoltRoofDetector2))
            {
                with (objVoltRoofDetector2)
                    instance_destroy();
                VRD = instance_create(x - 8, y, objVoltRoofDetector2);
            }
            
            if (instance_exists(objVoltRoofDetector2)
            &amp;&amp; y &lt;= objVoltRoofDetector2.y + 24
            &amp;&amp; objVoltRoofDetector2.hitRoof == true)
            {
                myGrav = -1;
                sprite_index = sprVolt2Idle;
                image_index = 0;
                if (!instance_exists(objVoltBarrier)
                &amp;&amp; attackTimer &gt; attackTimerMax[phase] / 4)
                {
                    instance_create(x, y, objVoltBarrier);
                }
                if ((chargeSound == false)
                &amp;&amp; attackTimer &lt; attackTimerMax[phase] / 4)
                {
                    playSFX(sfxVolt2Charge);
                    chargeSound = true;
                }
            }
            else
                attackTimer = 0;
            
            if (instance_exists(objVoltRoofDetector2)
            &amp;&amp; ground == true &amp;&amp; myGrav == 1)
            {
                if (objVoltRoofDetector2.offRoof == true)
                {
                    yspeed = ySpeedAim(y, objVoltRoofDetector2.y + 16, 0.25 * myGrav);
                    sprite_index = sprVolt2Jump;
                    image_index = 0;
                }
            }
            
            if (attackTimer == attackTimerMax[phase])
            {
                phase = 1;
                myGrav = 1;
                y += 2;
                sprite_index = sprVolt2Jump;
                image_index = 0;
                attackTimer = 0;
            }
            break;
          case 1: // centering
            if ((ground == true) &amp;&amp; (sprite_index == sprVolt2Jump) &amp;&amp; (attackTimer &gt;= 5))
            {
                sprite_index = sprVolt2Idle;
                xspeed = 0;
            }
            if ((ground == true) &amp;&amp; (x != view_xview[0]+(view_wview[0]/2)) &amp;&amp; (attackTimer &gt;= 5)) {
                attackTimer = 0;
                xspeed = xSpeedAim(x, y, view_xview[0]+(view_wview[0]/2), y, -6);
                yspeed = -6;
                sprite_index = sprVolt2Jump;
                image_index = 0;
            }
            if (x != view_xview[0]+(view_wview[0]/2)) {
                if xspeed &lt; 0 &amp;&amp; (x &lt; view_xview[0]+(view_wview[0]/2)) {
                    xspeed = 0;
                    x = (view_xview[0]+(view_wview[0]/2))
                }
                else
                if xspeed &gt; 0 &amp;&amp; (x &gt; view_xview[0]+(view_wview[0]/2)) {
                    xspeed = 0;
                    x = (view_xview[0]+(view_wview[0]/2))
                }
            }
            
            if (attackTimer == attackTimerMax[phase])
            {
                chargeSound = false;
                stopSFX(sfxVolt2Loop);
                playSFX(sfxVolt2Launch);
                
                // create twin voltman shots
                VS = instance_create(x + 16, y - 3, objVoltmanShot2);
                VS.image_xscale = 1;
                VS = instance_create(x - 16, y - 3, objVoltmanShot2);
                VS.image_xscale = -1;
                
                // scatter shield to the four winds
                if (instance_exists(objVoltBarrier))
                {
                    VS = instance_create(objVoltBarrier.x, objVoltBarrier.y, objVoltmanDischarge2);
                    VS.image_index = 0;
                    VS.xspeed = 2;
                    VS.yspeed = -2;
                    VS = instance_create(objVoltBarrier.x, objVoltBarrier.y, objVoltmanDischarge2);
                    VS.image_index = 1;
                    VS.xspeed = 2;
                    VS.yspeed = 2;
                    VS = instance_create(objVoltBarrier.x, objVoltBarrier.y, objVoltmanDischarge2);
                    VS.image_index = 2;
                    VS.xspeed = -2;
                    VS.yspeed = 2;
                    VS = instance_create(objVoltBarrier.x, objVoltBarrier.y, objVoltmanDischarge2);
                    VS.image_index = 3;
                    VS.xspeed = -2;
                    VS.yspeed = -2;
                    if instance_exists(objVoltBarrier) {
                        with (objVoltBarrier)
                            instance_destroy();
                    }
                }
                sprite_index = sprVolt2Jump;
                with (objVoltRoofDetector2)
                    instance_destroy();
            }
            if (attackTimer == attackTimerMax[phase]+60) {
                sprite_index = sprVolt2Jump;
                image_index = 0;
                phase = 2;
                attackTimer = 0;
            }
            break;
          case 2: // get into the shocker (Main)
            // create the roof detector.
            if (!instance_exists(objVoltRoofDetector2))
            {
                with (objVoltRoofDetector2)
                    instance_destroy();
                VRD = instance_create(x - 8, y, objVoltRoofDetector2);
            }
            
            if (instance_exists(objVoltRoofDetector2)
            &amp;&amp; y &lt;= objVoltRoofDetector2.y + 24
            &amp;&amp; objVoltRoofDetector2.hitRoof == true)
            {
                myGrav = -1;
                sprite_index = sprVolt2Idle;
                image_index = 0;
                if (!instance_exists(objVoltBarrier)
                &amp;&amp; attackTimer &gt; attackTimerMax[phase] / 4)
                {
                    instance_create(x, y, objVoltBarrier);
                }
                if ((chargeSound == false)
                &amp;&amp; attackTimer &lt; attackTimerMax[phase] / 4)
                {
                    playSFX(sfxVolt2Charge);
                    chargeSound = true;
                }
            }
            else
                attackTimer = 0;
            
            if (instance_exists(objVoltRoofDetector2)
            &amp;&amp; ground == true &amp;&amp; myGrav == 1)
            {
                if (objVoltRoofDetector2.offRoof == true)
                {
                    yspeed = ySpeedAim(y, objVoltRoofDetector2.y + 16, 0.25 * myGrav);
                    sprite_index = sprVolt2Jump;
                    image_index = 0;
                }
            }
            
            if (attackTimer == attackTimerMax[phase])
            {
                phase = 3;
                myGrav = 1;
                y += 2;
                sprite_index = sprVolt2Jump;
                image_index = 0;
                attackTimer = 0;
                jumpsMade = 0;
                
                if turns == 0
                jumpsMax = 4;
                else if turns == 1 jumpsMax = 3
                turns++
            }
            break;
          case 3: // jumping
            if (ground == false)
                attackTimer = 0;
            if (ground == true &amp;&amp; attackTimer &lt;= 5)
            {
                sprite_index = sprVolt2Idle;
                xspeed = 0;
            }
            if (ground == true &amp;&amp; jumpsMade &lt; jumpsMax) &amp;&amp; attackTimer &gt;= 5
            {
                yspeed = (random_range(-14,-16)/2.5);
                xspeed = (random_range(2.95,4.42)/1/3) * image_xscale;
                sprite_index = sprVolt2Jump;
                image_index = 0;
                jumpsMade += 1;
            }            
            if (attackTimer == attackTimerMax[phase])
            {
                chargeSound = false;
                stopSFX(sfxVolt2Loop);
                playSFX(sfxVolt2Launch);
                
                // create twin voltman shots
                VS = instance_create(x + 16, y - 3, objVoltmanShot2);
                VS.image_xscale = 1;
                VS = instance_create(x - 16, y - 3, objVoltmanShot2);
                VS.image_xscale = -1;
                
                // scatter shield to the four winds
                if (instance_exists(objVoltBarrier))
                {
                    VS = instance_create(objVoltBarrier.x, objVoltBarrier.y, objVoltmanDischarge2);
                    VS.image_index = 0;
                    VS.xspeed = 2;
                    VS.yspeed = -2;
                    VS = instance_create(objVoltBarrier.x, objVoltBarrier.y, objVoltmanDischarge2);
                    VS.image_index = 1;
                    VS.xspeed = 2;
                    VS.yspeed = 2;
                    VS = instance_create(objVoltBarrier.x, objVoltBarrier.y, objVoltmanDischarge2);
                    VS.image_index = 2;
                    VS.xspeed = -2;
                    VS.yspeed = 2;
                    VS = instance_create(objVoltBarrier.x, objVoltBarrier.y, objVoltmanDischarge2);
                    VS.image_index = 3;
                    VS.xspeed = -2;
                    VS.yspeed = -2;
                    if instance_exists(objVoltBarrier) {
                        with (objVoltBarrier)
                            instance_destroy();
                    }
                }
                sprite_index = sprVolt2Shoot;
                with (objVoltRoofDetector2)
                    instance_destroy();
            }
            if (attackTimer == attackTimerMax[phase]+60) {
                sprite_index = sprVolt2Jump;
                image_index = 0;
                phase = 2;
                attackTimer = 0;
            }
            break;
        }
        
        // Face the player
        if (ground == true)
        {
            calibrateDirection();
        }
    }
    if (chargeSound == true) {
        if (!audio_is_playing(sfxVolt2Charge)) {
            if (!audio_is_playing(sfxVolt2Loop)) {
                loopSFX(sfxVolt2Loop);
            }
        }
    }
}
else
{
    image_speed = 0;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>other.guardCancel = guardCancel
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
