<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSonicMan</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>mskSonicMan</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;

healthBarPrimaryColor[1] = 22;
healthBarSecondaryColor[1] = 52;
mineCount = 0
grav = .24
customPose =true
hasTriggeredFall = false;
bossTriggered = true;
image_speed = 0;
contactDamage = 6;
ground = false;
hasFired = false
jumpMax = 3;
introType = 0
jumps = 0;
throwBomb = false
throwBombTimer = 0
phase =1
timer = 0
queArmCannon = false
jumpIndex = 1
jumpThrowIndexes[0] = 2
jumpThrowIndexes[1] = 3
jumpThrowIndexes[2] = 4
startXScale = -1
attackTimer = 0

// Music
music = "Mega_Man_5GB.gbs";
musicType = "VGM";
musicTrackNumber = 5;

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MaGMML3
enemyDamageValue(objSparkChaser, 1);
enemyDamageValue(objLaserTrident, 2);
enemyDamageValue(objWaterShield, 4);
enemyDamageValue(objTornadoBlow, 1);
enemyDamageValue(objThunderBeam, 1);
enemyDamageValue(objMagneticShockwave, 4);
enemyDamageValue(objIceWall, 1);
enemyDamageValue(objBreakDash, 1);

// MaGMML2
enemyDamageValue(objHornetChaser, 1);
enemyDamageValue(objJewelSatellite, 2);
enemyDamageValue(objGrabBuster, 2);
enemyDamageValue(objTripleBlade, 1);
enemyDamageValue(objWheelCutter, 3);
enemyDamageValue(objSlashClaw, 4);
enemyDamageValue(objSakugarne, 2);
enemyDamageValue(objSuperArrow, 2);
enemyDamageValue(objWireAdapter, 3);

// MaGMML1
enemyDamageValue(objMetalBlade, 1);
enemyDamageValue(objGeminiLaser, 1);
enemyDamageValue(objSolarBlaze, 4);
enemyDamageValue(objTopSpin, 1);
enemyDamageValue(objThunderWool, 2);
enemyDamageValue(objPharaohShot, 2);
enemyDamageValue(objBlackHoleBomb, 1);
enemyDamageValue(objMagicCard, 2);

// MaG48HMML
enemyDamageValue(objFlameMixer, 4);
enemyDamageValue(objRainFlush, 2);
enemyDamageValue(objSparkShock, 2);
enemyDamageValue(objSearchSnake, 1);
enemyDamageValue(objTenguBlade, 2);
enemyDamageValue(objTenguDash, 2);
enemyDamageValue(objTenguDisk, 2);
enemyDamageValue(objSaltWater, 2);
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objHomingSniper, 1);

// MaG24HMML
enemyDamageValue(objSuperArmBlockProjectile, 1);
enemyDamageValue(objSuperArmDebris, 1);
enemyDamageValue(objChillShot, 0);
enemyDamageValue(objChillSpikeLanded, 0);

// Misc.
enemyDamageValue(objPowerStone, 1);
enemyDamageValue(objPlantBarrier, 2);
enemyDamageValue(objBrickWeapon, 1);
enemyDamageValue(objIceSlasher, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// leave this. this is needed. 
event_inherited();

// all of sonic man's events trigger when the game isn't frozen. 
if (!global.frozen)
{
    if (startIntro)
    {
        y = ystart
        canFillHealthBar = false;
        sprite_index = sprSonicPose;
        image_index = 0;
        startIntro = false;
        isIntro = true;
        visible = true;
        calibrateDirection();
        grav = gravStart;
    }
    else if (isIntro)
    {
        if (y &gt;= ystart || hasTriggeredFall)
        {
            // Since bosses do not have gravity during intros, we need to reuse this here.
            hasTriggeredFall = true;
            grav = 0
            if image_index &lt; image_number-1 {
            image_speed = 12/60
            y = ystart;
            }
            else {
            image_speed = 0
            y -= 2.5
            if y &lt;= ystart - 40 {
            y= ystart-40
            image_speed = 0;
                canFillHealthBar = true;
                isIntro = false;
                ground = true;
                attackTimer = 0;
                blockCollision = blockCollisionStart;
            
            }
            }
        }
    }
    
    if (entityCanStep())
    {
        if (isFight)
        {
            image_speed = 0;
            
            
            calibrateDirection();
            switch (phase)
            {
                case -1:
                    timer = 0;
                    if (mineCount == 3)
                    {
                        phase = 4;
                    }
                    else
                    {
                        phase = 0;
                    }
                    break;
                case 0:
                    attackTimer++;
                    xspeed = 0;
                    if (mineCount &lt;= 2)
                    {
                        if (attackTimer % 12 == 0)
                        {
                            if (image_index == 1)
                                image_index = 2;
                            else
                                image_index = 1;
                        }
                        
                        if (attackTimer == 20) // move up
                        {
                            sprite_index = sprSonicMan;
                            yspeed = -1.5;
                            bobAround = false;
                            grav = 0;
                        }
                        if (attackTimer == 34) // fire sonic mine
                        {
                            hasFired = false;
                            phase = 1;
                            image_index = 3;
                            sprite_index = sprSonicMan;
                        }
                    }
                    else
                    {
                        xspeed = 0;
                        if (attackTimer == 20) // move up
                        {
                            sprite_index = sprSonicMan;
                            yspeed = -2.5;
                            bobAround = false;
                            image_index = 4;
                            grav = 0;
                        }
                        if (attackTimer == 25) // fire sonic mine
                        {
                            hasFired = false;
                            phase = 1;
                            mineCount = 0;
                            image_index = 3;
                            sprite_index = sprSonicMan;
                        }
                    }
                    break;
                case 1: // fire sonic mine 
                    sprite_index = sprSonicMan;
                    attackTimer++;
                    image_index = 3;
                    if (!hasFired)
                    {
                        hasFired = true;
                        playSFX(sfxSonicManSonicMine);
                        var inst = instance_create(x, y, objSonicMine);
                        inst.xspeed = 4 * image_xscale;
                        inst = instance_create(x, y, objSonicMine);
                        inst.xspeed = 2.5 * image_xscale;
                        inst = instance_create(x, y, objSonicMine);
                        inst.xspeed = 1 * image_xscale;
                    }
                    if (attackTimer == 56) // fire sonic mine
                    {
                        yspeed = 0;
                        hasFired = false;
                        attackTimer = 0;
                        phase = choose(3);
                        image_index = 1;
                        bobAround = true;
                    }
                    break;
                case 3: // move 
                    attackTimer++;
                    if (attackTimer % 12 == 0)
                    {
                        if (image_index == 1)
                            image_index = 2;
                        else
                            image_index = 1;
                    }
                    if (!hasFired &amp;&amp; attackTimer &gt;= 24)
                    {
                        xspeed = choose(1.5, 1.75, 2) * image_xscale;
                        yspeed = 1;
                        hasFired = true;
                    }
                    if (attackTimer == 72 || xcoll != 0)
                    {
                        xspeed = 0;
                    }
                    if (ground)
                    {
                        xspeed = 0;
                        attackTimer = -24;
                        phase = -1;
                        mineCount++;
                    }
                    break;
                case 4:
                    timer++;
                    if (timer &gt; 15)
                    {
                        timer = 0;
                        phase = 5;
                        
                        yspeed = -5;
                    }
                    break;
                case 5:
                    image_index = 4;
                    timer++;
                    yspeed += .25;
                    if (timer == 1)
                    {
                        xspeed = arcCalcXspeed(-5, .24, x, y, view_xview[0] + 128, y);
                    }
                    if (timer &gt; 3 &amp;&amp; ground)
                    {
                        xspeed = 0;
                        timer = 0;
                        yspeed = 0;
                        phase = 6;
                    }
                    break;
                case 6:
                    timer++;
                    if (timer == 1)
                    {
                        image_index = 0;
                        var e = instance_create(x, y, objSonicWave)
                            ;
                            playSFX(sfxSonicWave)
                        if (image_xscale == -1)
                            e.angle = 180;
                        else
                            e.angle = 0;
                        e.image_xscale = image_xscale;
                    }
                    if (timer == 10)
                    {
                        image_index = 5
                    }
                    if (timer &gt; 10 &amp;&amp; !instance_exists(objSonicWave))
                    {
                        image_index = 0;
                        sprite_index = sprSonicMan;
                        var f = instance_create(x, y, objSonicWave)
                            ;
                        if (image_xscale == -1)
                            f.angle = 180;
                        else
                            f.angle = 0;
                        f.image_xscale = image_xscale;
                        phase = 7;
                        timer = 0;
                    }
                    break;
                case 7:
                    if !instance_exists(objSonicWave) {
                    timer++;
                    if (timer &gt; 10)
                    {
                        image_index = 0;
                        sprite_index = sprSonicPose;
                    }
                    if (timer &gt; 25)
                    {
                        image_index = 0;
                        phase = 8;
                        timer = 0;
                        attackTimer = 0
                    }
                    }
                    break;
                case 8:
                    attackTimer++;
                    xspeed = 0;
                    image_index = 4;
                    
                    // move up
                    sprite_index = sprSonicMan;
                    if (attackTimer == 1)
                        yspeed = -5;
                    bobAround = false;
                    grav = .24;
                    if (attackTimer == 14) // fire sonic mine
                    {
                        hasFired = false;
                        phase = 1;
                        yspeed = 0;
                        image_index = 3;
                        sprite_index = sprSonicMan;
                        grav = 0;
                    }
                    break;
            }
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
