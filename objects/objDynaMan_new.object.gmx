<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprDynaMan</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;

healthBarPrimaryColor[1] = 22;
healthBarSecondaryColor[1] = 52;
mineCount = 0
grav = .24
sprite_index  = sprDynaManIntro
pose=  sprDynaManIntro
poseImgSpeed= 0.25
hasTriggeredFall = false;
bossTriggered = true;
image_speed = 0;
contactDamage = 6;
ground = false;
hasFired = false
jumpMax = 3;
jumps = 0;
throwBomb = false
throwBombTimer = 0
phase =0
timer = 0
queArmCannon = false
jumpIndex = 1

jumpThrowIndexes[0] = 2
jumpThrowIndexes[1] = 3
jumpThrowIndexes[2] = 4
startXScale = -1
attackTimer = 0

// Music
music = "Mega_Man_5GB.gbs";
musicType = "VGM";
musicTrackNumber = 5;

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MaGMML3
enemyDamageValue(objSparkChaser, 1);
enemyDamageValue(objLaserTrident, 2);
enemyDamageValue(objWaterShield, 4);
enemyDamageValue(objTornadoBlow, 1);
enemyDamageValue(objThunderBeam, 1);
enemyDamageValue(objMagneticShockwave, 4);
enemyDamageValue(objIceWall, 1);
enemyDamageValue(objBreakDash, 1);

// MaGMML2
enemyDamageValue(objHornetChaser, 1);
enemyDamageValue(objJewelSatellite, 2);
enemyDamageValue(objGrabBuster, 2);
enemyDamageValue(objTripleBlade, 1);
enemyDamageValue(objWheelCutter, 3);
enemyDamageValue(objSlashClaw, 4);
enemyDamageValue(objSakugarne, 2);
enemyDamageValue(objSuperArrow, 2);
enemyDamageValue(objWireAdapter, 3);

// MaGMML1
enemyDamageValue(objMetalBlade, 1);
enemyDamageValue(objGeminiLaser, 1);
enemyDamageValue(objSolarBlaze, 4);
enemyDamageValue(objTopSpin, 1);
enemyDamageValue(objThunderWool, 2);
enemyDamageValue(objPharaohShot, 2);
enemyDamageValue(objBlackHoleBomb, 1);
enemyDamageValue(objMagicCard, 2);

// MaG48HMML
enemyDamageValue(objFlameMixer, 4);
enemyDamageValue(objRainFlush, 2);
enemyDamageValue(objSparkShock, 2);
enemyDamageValue(objSearchSnake, 1);
enemyDamageValue(objTenguBlade, 2);
enemyDamageValue(objTenguDash, 2);
enemyDamageValue(objTenguDisk, 2);
enemyDamageValue(objSaltWater, 2);
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objHomingSniper, 1);

// MaG24HMML
enemyDamageValue(objSuperArmBlockProjectile, 1);
enemyDamageValue(objSuperArmDebris, 1);
enemyDamageValue(objChillShot, 0);
enemyDamageValue(objChillSpikeLanded, 0);

// Misc.
enemyDamageValue(objPowerStone, 1);
enemyDamageValue(objPlantBarrier, 2);
enemyDamageValue(objBrickWeapon, 1);
enemyDamageValue(objIceSlasher, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// leave this. this is needed.
event_inherited();

// all of dyna man's events trigger when the game isn't frozen.
if (!global.frozen)
{
    if (startIntro)
    {
        y -= view_hview;
        canFillHealthBar = false;
        image_index = 2;
        startIntro = false;
        isIntro = true;
        visible = true;
        grav = .24;
        calibrateDirection();
    }
    
}
if (entityCanStep())
{
    if (isFight)
    {
        image_speed = 0;
        sprite_index = sprDynaMan;
        calibrateDirection();
        switch phase {
        case 0:
        grav = .24;
        image_index = 0
        timer++
        if timer &gt; 25 {
        timer = 0
        jumps++
        xspeed = choose(2,2.5)*image_xscale
        yspeed = choose(-4.5,-5,-6)
        phase = 1
        timer = 0
        startXScale = image_xscale
        queArmCannon = false
        }
        break
        case 1:
        if place_meeting(x+xspeed,y,objSolid) queArmCannon = true
        if instance_exists(objMegaman) {
        if image_xscale = startXScale {
        jumpIndex = 1
        jumpThrowIndexes[0] = 2
        jumpThrowIndexes[1] = 3
        jumpThrowIndexes[2] = 4
        }
        else {
        jumpIndex = 5
        jumpThrowIndexes[0] = 5
        jumpThrowIndexes[1] = 6
        jumpThrowIndexes[2] = 7
        }
        
        }
        else {
        jumpIndex = 1
        jumpThrowIndexes[0] = 2
        jumpThrowIndexes[1] = 3
        jumpThrowIndexes[2] = 4
        }
        if yspeed &lt; -0.25 {image_index = jumpIndex}
        if yspeed &gt; -0.25 &amp;&amp; jumps == 3 {
        timer++
        if timer == 1 image_index = jumpThrowIndexes[0]
        if timer == 4 image_index= jumpThrowIndexes[1] 
        if timer == 8 {
        image_index= jumpThrowIndexes[2]
         with (instance_create(x ,
                        y, objDynaDynamite))
                    {
                        image_xscale = other.image_xscale;
                        aimAtTarget(4);
                        
                    }
        }
        if timer == 12 image_index = jumpIndex
        }
        if ground {
        xspeed = 0
        image_index = 0
        if queArmCannon {phase = 2
        image_index = 9
        }
        else phase = 0
        timer = 0
        if jumps=  3 jumps = 0
        
        }
        break
        case 2:
        if image_index &lt; 17
        image_index+=0.25
        else {
        phase= 3
        }
        break
        case 3:
        timer++
        if timer == 15 || timer == 30 || timer == 45 {
        with (instance_create(x ,
                        y, objDynaDynamite))
                    {
                        image_xscale = other.image_xscale;
                        aimAtTarget(4);
                    }
                    image_index = 18
        }
        if timer == 20 || timer == 35 || timer = 50 image_index = 17
        if timer == 60 {
        timer = 0
        phase = 0
        queArmCannon = false
        jumps = 0
        }
        break
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

smallJumps = 3 + irandom(4);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (objDynaDynamite)
{
    instance_create(x, y, objExplosion);
    instance_destroy();
}
with (objHarmfulExplosion)
{
    instance_destroy();
}
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
