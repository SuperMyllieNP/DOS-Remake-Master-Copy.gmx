<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprVictoryAnimations</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEffect</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()

col[0] = 0
col[1] = 0
col[2] = 0
col[3] = 0

imgIndex = 0;

pid = 0;
cid = 0;

teleTimer = 40;

soundPlayed = false;

frameCount[0] = 8;
frameCount[1] = 5;
frameCount[2] = 7;
frameCount[3] = 8;
frameCount[4] = 9;
frameCount[5] = 9;

vicFrames = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vicFrames = frameCount[cid]

imgIndex = min(imgIndex + 0.25, vicFrames)
if imgIndex &gt;= (vicFrames)
{
    teleTimer -= 1;
}

if teleTimer &lt;= 0
{
    i = instance_create(x, y, objMegamanExit);
    i.pid = pid;
    i.cid = cid;
    
    visible = 0;
    instance_destroy();
}

if floor(imgIndex) == 1 &amp;&amp; soundPlayed == false
{
    playSFX(sfxMenuSelect)
    soundPlayed = true
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
    var playerID;
    playerID = pid;
*/

col[0] = c_white;
col[1] = global.primaryCol[pid];
col[2] = global.secondaryCol[pid];
col[3] = global.outlineCol[pid];

//drawCostume(sprVictoryAnimations, min(imgIndex, vicFrames - 1), cid, round(x), round(y), image_xscale, image_yscale, c_white, global.primaryCol[pid], global.secondaryCol[pid], global.outlineCol[pid]);

for (var i = 0; i &lt; 4; i ++)
{
    draw_sprite_part_ext(sprVictoryAnimations, i, 1 + (floor(min(imgIndex, vicFrames - 1)) * (48 + 3)), 1 + (floor(cid) * (48 + 3)), 48, 48, round(x) - (24 * image_xscale), round(y) - (20 * image_xscale), image_xscale, image_yscale, col[i], 1);
};

//1 + (floor(imgIndex)) * (48 + 3)

/*
/// drawCostume(costume, sheetX, sheetY, x, y, xscale, yscale, colBase, colPrimary, colSecondary, colOutline, [alphaBase = 1, alphaPrimary = 1, alphaSecondary = 1, alphaOutline = 1])
// draws the given costume (player skin) at the given coordinates with the given palette.
// costume: sprite index of costume (e.g. objMegaman)
// sheetX, sheetY: coord (in 48x48 units) of the animation frame in the skin sheet.
// colBase: blend mode to use for the base colour (leave as c_white)
// colPrimary, colSecondary, colOutline: palette colours
// [alphaBase, alphaPrimary, alphaSecondary, alphaOutline] (optional): alpha values for palette (0-1)

var costume = argument[0],
    sheetX = argument[1],
    sheetY = argument[2],
    _x = argument[3],
    _y = argument[4],
    _xscale = argument[5],
    _yscale = argument[6],
    col,
    alpha;

// palette
for (var i = 0; i &lt; 4; i++)
{
    col[i] = argument[7 + i];
    if (argument_count &gt; 11 + i)
        alpha[i] = argument[11 + i];
    else
        alpha[i] = 1;
}

var SquareSize = 48;

for (var i = 0; i &lt; 4; i += 1)
{
    draw_sprite_part_ext(costume, i,
        1 + (floor(sheetX) * (SquareSize + 3)),
        1 + (floor(sheetY) * (SquareSize + 3)), SquareSize,
        SquareSize, round(_x) - (24 * _xscale),
        round(_y) - (20 * _yscale), _xscale, _yscale,
        col[i], alpha[i]);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
